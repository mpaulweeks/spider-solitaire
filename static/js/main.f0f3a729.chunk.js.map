{"version":3,"sources":["logic/index.ts","logic/board.ts","fe/ViewCard.tsx","fe/ViewColumn.tsx","fe/ViewBoard.tsx","fe/App.tsx","reportWebVitals.ts","index.tsx","logic/card.ts","logic/column.ts","logic/util.ts"],"names":["Board","originalDeck","columns","remainingDeck","this","range","map","_","Column","concat","i","length","dealFaceDown","pop","forEach","c","revealBottom","Error","dealFaceUp","suitToSymbol","ViewCard","props","card","state","faceUp","value","suit","CompColumn","styled","div","ViewColumn","column","cards","CompBoard","ViewBoard","board","App","GenerateDeck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Card","Math","floor","code","parent","current","getCurrent","canMoveBelowCard","push","reveal","serialize","out","numSuits","deck","arr","subArr","flatten","v","GenerateCard","array","currentIndex","randomIndex","random","shuffle"],"mappings":"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","file":"static/js/main.f0f3a729.chunk.js","sourcesContent":["export * from './board';\nexport * from './card';\nexport * from './column';\nexport * from './types';\nexport * from './util';\n","import { Column } from \"./column\";\nimport { DeckData } from \"./types\";\nimport { range } from \"./util\";\n\nexport class Board {\n  readonly columns: Column[];\n  readonly remainingDeck: DeckData;\n  constructor(readonly originalDeck: DeckData) {\n    const numColumns = 10;\n    this.columns = range(numColumns).map(_ => new Column());\n    this.remainingDeck = originalDeck.concat();\n\n    // deal all but 5 deals\n    for (let i = 0; this.remainingDeck.length > (5 * numColumns); i++) {\n      const column = this.columns[i % this.columns.length];\n      column.dealFaceDown(this.remainingDeck.pop()!);\n    }\n\n    // reveal bottom\n    this.columns.forEach(c => c.revealBottom());\n  }\n\n  deal() {\n    if (this.remainingDeck.length < this.columns.length) { throw new Error('deal is impossible'); }\n    this.columns.forEach(c => c.dealFaceUp(this.remainingDeck.pop()!));\n  }\n}\n","import React from 'react';\nimport { Card } from \"../logic\";\n\nconst suitToSymbol = [\n  '♥️',\n  '♠️',\n  '♦️',\n  '♣️',\n];\n\nexport function ViewCard(props: { card: Card }) {\n  return (\n    <div>\n      {props.card.state.faceUp ? (\n        <div>\n          {props.card.value} {suitToSymbol[props.card.suit]}\n        </div>\n      ) : (\n        <div>hidden</div>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport { ViewCard } from './ViewCard';\nimport { Column } from \"../logic\";\n\nimport styled from 'styled-components';\nconst CompColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\n\nexport function ViewColumn(props: { column: Column }) {\n  return (\n    <CompColumn>\n      {props.column.cards.map(card => (\n        <ViewCard card={card} />\n      ))}\n    </CompColumn>\n  )\n}\n","import React from 'react';\nimport { Board } from \"../logic\";\nimport { ViewColumn } from './ViewColumn';\n\nimport styled from 'styled-components';\nconst CompBoard = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\n\nexport function ViewBoard(props: { board: Board }) {\n  return (\n    <CompBoard>\n      {props.board.columns.map(column => (\n        <ViewColumn column={column} />\n      ))}\n    </CompBoard>\n  );\n}\n","import React from 'react';\nimport { Board, GenerateDeck } from '../logic';\nimport { ViewBoard } from './ViewBoard';\n\nfunction App() {\n  const board = new Board(GenerateDeck(4));\n  return <ViewBoard board={board} />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './fe/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Column } from \"./column\";\nimport { CardState } from \"./types\";\n\nexport class Card {\n  readonly suit: number;\n  readonly value: number;\n  constructor(readonly state: CardState) {\n    this.suit = Math.floor(state.code / 100);\n    this.value = state.code % 100;\n  }\n\n  reveal() {\n    this.state.faceUp = true;\n  }\n  canMoveBelowCard(parent: Card) {\n    return (this.value + 1) === parent.value;\n  }\n  canMoveBelowColumn(column: Column) {\n    const current = column.getCurrent();\n    return !current || this.canMoveBelowCard(current);\n  }\n\n  serialize(): CardState {\n    return this.state;\n  }\n}\n","import { Card } from \"./card\";\nimport { CardCode, CardState } from \"./types\";\n\nexport class Column {\n  readonly cards: Card[] = [];\n\n  dealFaceDown(code: CardCode) {\n    this.cards.push(new Card({ code, faceUp: false, }));\n  }\n  dealFaceUp(code: CardCode) {\n    this.cards.push(new Card({ code, faceUp: true, }));\n  }\n  revealBottom() {\n    this.cards[this.cards.length - 1]?.reveal();\n  }\n\n  getCurrent(): Card | undefined {\n    return this.cards[this.cards.length - 1];\n  }\n\n  serialize(): CardState[] {\n    return this.cards.map(c => c.serialize());\n  }\n}\n","import { DeckData } from \"./types\";\n\nexport function range(length: number): number[] {\n  const out = [] as number[];\n  for (let i = 0; i < length; i++) {\n    out.push(i);\n  }\n  return out;\n}\nexport function flatten<T>(arr: T[][]): T[] {\n  // dumb polyfill for jest\n  // https://github.com/kulshekhar/ts-jest/issues/828\n  const out = [] as T[];\n  arr.forEach(subArr => out.push(...subArr));\n  return out;\n}\nexport function shuffle<T>(array: T[]) {\n  // https://stackoverflow.com/a/2450976\n  let currentIndex = array.length;\n  let randomIndex = 0;;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n  return array;\n}\n\nexport function GenerateCard(suit: number, value: number) {\n  return (suit * 100) + value;\n}\n\nexport function GenerateDeck(numSuits: number) {\n  const rows = range(8).map(i => {\n    const suit = i % numSuits;\n    const cards = range(13).map(v => GenerateCard(suit, v));\n    return cards;\n  });\n  const deck: DeckData = flatten(rows);\n  shuffle(deck);\n  return deck;\n}\n"],"sourceRoot":""}