{"version":3,"sources":["logic/board.ts","logic/index.ts","fe/ViewCard.tsx","fe/ViewColumn.tsx","fe/ViewBoard.tsx","fe/App.tsx","reportWebVitals.ts","index.tsx","logic/column.ts","logic/card.ts","logic/util.ts"],"names":["Board","args","originalDeck","remainingDeck","columns","this","length","remainingDeals","Error","forEach","c","deal","pop","revealBottom","pointers","column","filter","index","columnIndex","card","cards","state","id","cardId","range","map","i","colId","col","canMoveBelowColumn","resolvePointers","possibleMovesFromObj","canMove","dest","popped","push","serialize","Column","deserialize","concat","CompCard","styled","div","props","color","background","suitToSymbol","suitToColor","valueToString","ViewCard","canReceiveHover","onHover","trigger","faceUp","pointer","suit","onClick","b","performMove","onMouseEnter","onMouseLeave","undefined","value","CompColumn","ViewColumn","ci","arr","CompBoard","CompHeader","CompColumnContainer","ViewBoard","board","possibleMoves","reset","possibleMoveIds","createNew","GenerateDeck","includes","App","useState","boardState","setBoardState","hover","setHover","triggerBoard","useCallback","cb","newBoard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Card","reveal","findIndex","relIndexOf","head","getHead","headIndex","topCard","reverse","newCards","relIndex","parent","canMoveBelowCard","Math","floor","code","current","getLeaf","out","numSuits","deck","subArr","flatten","v","GenerateCard","array","currentIndex","randomIndex","random","shuffle"],"mappings":"+LAKaA,EAAb,WAIE,WAAYC,GAIR,yBAPKC,kBAON,OANMC,mBAMN,OALMC,aAKN,EACDC,KAAKH,aAAeD,EAAKC,aACzBG,KAAKF,cAAgBF,EAAKE,cAC1BE,KAAKD,QAAUH,EAAKG,QAXxB,kDAcE,WACE,OAAOC,KAAKF,cAAcG,OAASD,KAAKD,QAAQE,SAfpD,kBAiBE,WAAQ,IAAD,OACL,GAAID,KAAKE,iBAAmB,EAC1B,MAAM,IAAIC,MAAM,sBAElBH,KAAKD,QAAQK,SAAQ,SAACC,GACpBA,EAAEC,KAAK,EAAKR,cAAcS,OAC1BF,EAAEG,oBAvBR,6BA0BE,SAAwBC,GACtB,IAAMC,EAASV,KAAKD,QAAQY,QAAO,SAAAN,GAAC,OAAIA,EAAEO,QAAUH,EAASI,eAAa,GACpEC,EAAOJ,EAAOK,MAAMJ,QAAO,SAAAN,GAAC,OAAIA,EAAEW,MAAMC,KAAOR,EAASS,UAAQ,GACtE,MAAO,CAAER,SAAQI,UA7BrB,kCA+BE,SAA6BJ,EAAgBI,GAAwB,IAAD,OAClE,OAAKA,EACaK,YAAMnB,KAAKD,QAAQE,OAAS,GAAGmB,KAAI,SAAAC,GACnD,IAAMC,GAASZ,EAAOE,MAAQS,EAAI,GAAK,EAAKtB,QAAQE,OACpD,OAAO,EAAKF,QAAQuB,MAEEX,QAAO,SAAAY,GAAG,OAAIT,EAAKU,mBAAmBD,MAL1C,KAhCxB,2BAwCE,SAAcd,GAAqB,IAAD,EACPT,KAAKyB,gBAAgBhB,GAAtCC,EADwB,EACxBA,OAAQI,EADgB,EAChBA,KAChB,OAAOd,KAAK0B,qBAAqBhB,EAAQI,KA1C7C,yBA4CE,SAAYL,GAAqB,IAAD,EACLT,KAAKyB,gBAAgBhB,GAAtCC,EADsB,EACtBA,OAAQI,EADc,EACdA,KAChB,GAAKA,GACWJ,EAAOiB,QAAQb,GAC/B,CACA,IACMc,EADgB5B,KAAK0B,qBAAqBhB,EAAQI,GAC7B,GAC3B,GAAIc,EAAM,CACR,IAAMC,EAASnB,EAAOH,IAAIO,GAC1BJ,EAAOF,eACPoB,EAAKE,KAAKD,OAtDhB,uBA0DE,WACE,MAAO,CACLhC,aAAcG,KAAKH,aACnBC,cAAeE,KAAKF,cACpBC,QAASC,KAAKD,QAAQqB,KAAI,SAACf,GAAD,OAAOA,EAAE0B,mBA9DzC,0BAiEE,SAAmBf,GACjB,IAAMjB,EAAUiB,EAAMjB,QAAQqB,KAAI,SAACV,GAAD,OAAYsB,IAAOC,YAAYvB,MACjE,OAAO,IAAIf,EAAJ,2BACFqB,GADE,IAELjB,eArEN,uBAyEE,SAAiBF,GAMf,IALA,IACME,EAAUoB,YADG,IACeC,KAAI,SAAAC,GAAC,OAAI,IAAIW,IAAOX,MAChDvB,EAAgBD,EAAaqC,SAG1Bb,EAAI,EAAGvB,EAAcG,OAAS,GAAgBoB,IAAK,CAC3CtB,EAAQsB,EAAItB,EAAQE,QAC5BK,KAAKR,EAAcS,OAM5B,OAFAR,EAAQK,SAAQ,SAACC,GAAD,OAAOA,EAAEG,kBAElB,IAAIb,EAAM,CACfE,eACAC,gBACAC,gBA1FN,M,+BCLA,sN,oKCIMoC,EAAWC,IAAOC,IAAV,2NACF,SAAAC,GAAK,OAAIA,EAAMC,SAKX,SAAAD,GAAK,OAAIA,EAAME,cAGnB,SAAAF,GAAK,OAAIA,EAAMX,QAAU,UAAY,iBAG3Cc,EAAe,CACnB,eACA,eACA,eACA,gBAEIC,EAAc,CAClB,QACA,MACA,aACA,SAEIC,EAAgB,CACpB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,KAGK,SAASC,EAASN,GAMrB,IAEA5B,EAKE4B,EALF5B,OACAI,EAIEwB,EAJFxB,KACA+B,EAGEP,EAHFO,gBACAC,EAEER,EAFFQ,QACAC,EACET,EADFS,QAEF,IAAKjC,EAAM,CACT,IAAM0B,EAAaK,EAAkB,aAAe,QACpD,OACE,cAACV,EAAD,CAAUR,SAAS,EAAOY,MAAM,OAAOC,WAAYA,EAAnD,qBAKJ,GAAI1B,EAAKE,MAAMgC,OAAQ,CACrB,IAAMC,EAAoB,CAAEpC,YAAaH,EAAOE,MAAOM,OAAQJ,EAAKE,MAAMC,IACpEU,EAAUjB,EAAOiB,QAAQb,GACzB0B,GACFb,EACDkB,GAAmB,aADP,cAEb,QAEF,OACE,eAACV,EAAD,CACER,QAASA,EACTY,MAAOG,EAAY5B,EAAKoC,MACxBV,WAAYA,EACZW,QAASJ,GAAQ,SAAAK,GAAC,OAAIA,EAAEC,YAAYJ,MACpCK,aAAc,kBAAMR,EAAQG,IAC5BM,aAAc,kBAAMT,OAAQU,IAN9B,UAQGb,EAAc7B,EAAK2C,OARtB,IAQ+BhB,EAAa3B,EAAKoC,SAWrD,OACE,cAACf,EAAD,CAAUR,SAAS,EAAOY,MAAM,QAAQC,WAR1B,oHAQd,iBC1FJ,I,MAAMkB,EAAatB,IAAOC,IAAV,8KAUT,SAASsB,EAAWrB,GAKvB,IAEA5B,EAIE4B,EAJF5B,OACAmC,EAGEP,EAHFO,gBACAC,EAEER,EAFFQ,QACAC,EACET,EADFS,QAEF,OACE,eAACW,EAAD,WAC2B,IAAxBhD,EAAOK,MAAMd,QACZ,cAAC2C,EAAD,CACElC,OAAQA,EACRI,UAAM0C,EACNX,gBAAiBA,EACjBC,QAAS,aACTC,QAASA,IAGZrC,EAAOK,MAAMK,KAAI,SAACN,EAAM8C,EAAIC,GAAX,OAChB,cAACjB,EAAD,CAEElC,OAAQA,EACRI,KAAMA,EACN+B,gBAAiBA,GAAmBe,IAAOC,EAAI5D,OAAS,EACxD6C,QAASA,EACTC,QAASA,GALJa,SCnCf,IAAME,EAAY1B,IAAOC,IAAV,2JAOT0B,EAAa3B,IAAOC,IAAV,2KASV2B,EAAsB5B,IAAOC,IAAV,wJAQlB,SAAS4B,EAAU3B,GAMtB,IAEA4B,EAKE5B,EALF4B,MACAC,EAIE7B,EAJF6B,cACArB,EAGER,EAHFQ,QACAC,EAEET,EAFFS,QACAqB,EACE9B,EADF8B,MAEIlE,EAAiBgE,EAAMhE,iBACvBmE,EAAkBF,EAAc/C,KAAI,SAAAG,GAAG,OAAIA,EAAIX,SACrD,OACE,eAACkD,EAAD,WACE,eAACC,EAAD,WACE,wBAAQZ,QAAS,kBAAMiB,EAAMzE,QAAM2E,UAAUC,uBAAa,MAA1D,oBAGA,wBAAQpB,QAAS,kBAAMiB,EAAMzE,QAAM2E,UAAUC,uBAAa,MAA1D,oBAGA,wBAAQpB,QAAS,kBAAMiB,EAAMzE,QAAM2E,UAAUC,uBAAa,MAA1D,oBAGA,wBAAQpB,QAAS,kBAAMiB,EAAMzE,QAAM2E,UAAUC,uBAAa,MAA1D,uBAIF,cAACR,EAAD,UACG7D,EACC,yBAAQiD,QAASJ,GAAQ,SAAAK,GAAC,OAAIA,EAAE9C,UAAhC,kBACQJ,KAEN,OAEN,cAAC8D,EAAD,UACGE,EAAMnE,QAAQqB,KAAI,SAACV,EAAQkD,GAAT,OACjB,cAACD,EAAD,CAAqBjD,OAAQA,EAAQmC,gBAAiBwB,EAAgBG,SAASZ,GAAKd,QAASA,EAASC,QAASA,GAA9Fa,WClEpB,SAASa,IAAO,IAAD,EACgBC,mBAAS/E,QAAM2E,UAAUC,uBAAa,IAAIxC,aAD1D,mBACb4C,EADa,KACDC,EADC,OAEMF,wBAASlB,GAFf,mBAEbqB,EAFa,KAENC,EAFM,KAIdC,EAAeC,uBAAY,SAACC,GAMhC,OALkB,WAChB,IAAMC,EAAWvF,QAAMsC,YAAY0C,GACnCM,EAAGC,GACHN,EAAcM,EAASnD,gBAGxB,CAAC4C,EAAYC,IAEVR,EAAQY,uBAAY,SAACE,GACzBN,EAAcM,EAASnD,eACtB,CAAC6C,IAEEV,EAAQvE,QAAMsC,YAAY0C,GAC1BR,EAAgBU,EAAQX,EAAMC,cAAcU,GAAS,GAC3D,OACE,cAACZ,EAAD,CACEC,MAAOA,EACPC,cAAeA,EACfrB,QAASgC,EACT/B,QAASgC,EACTX,MAAOA,IC3Bb,IAYee,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrB,EAAD,MAEFsB,SAASC,eAAe,SAM1Bb,K,kGCbanD,EAAb,WACE,WAAqBpB,GAA6C,IAArBG,EAAoB,uDAAJ,GAAI,yBAA5CH,QAA4C,KAApBG,QAD/C,wCAGE,SAAKC,GACHhB,KAAKe,MAAMe,KAAK,IAAImE,IAAKjF,MAJ7B,0BAME,WAAgB,IAAD,EACb,UAAAhB,KAAKe,MAAMf,KAAKe,MAAMd,OAAS,UAA/B,SAAmCiG,WAPvC,wBASE,SAAmBpF,GACjB,OAAOd,KAAKe,MAAMoF,WAAU,SAAA9F,GAAC,OAAIA,EAAEW,MAAMC,KAAOH,EAAKE,MAAMC,QAV/D,qBAYE,SAAQH,GACN,IAAKA,EAAKE,MAAMgC,OAAU,OAAO,EACjC,IAAMpC,EAAQZ,KAAKoG,WAAWtF,GAC9B,GAAIF,EAAQ,EAAK,OAAO,EACxB,GAAIA,IAAUZ,KAAKe,MAAMd,OAAS,EAAK,OAAO,EAC9C,IAAMoG,EAAOrG,KAAKsG,UAClB,GAAID,EAAM,CACR,IAAME,EAAYvG,KAAKoG,WAAWC,GAClC,GAAIE,GAAa,GAAKA,GAAa3F,EACjC,OAAO,EAGX,OAAO,IAxBX,iBA0BE,SAAI4F,GACF,IAAM5F,EAAQZ,KAAKoG,WAAWI,GAC9B,GAAI5F,EAAQ,EAAK,MAAM,IAAIT,MAAM,gBAEjC,IADA,IAAM0B,EAAiB,GAChB7B,KAAKe,MAAMd,OAASW,GACzBiB,EAAOC,KAAK9B,KAAKe,MAAMR,OAEzB,OAAOsB,EAAO4E,YAjClB,kBAmCE,SAAKC,GAAyB,IAAD,GAC3B,EAAA1G,KAAKe,OAAMe,KAAX,oBAAmB4E,MApCvB,qBAuCE,WAIE,IAHA,IAAIC,EAAW3G,KAAKe,MAAMd,OAAS,EAC/BoG,EAAOrG,KAAKe,MAAM4F,GAClBC,EAAS5G,KAAKe,MAAM4F,EAAW,GAC5BC,GAAUP,GAAQA,EAAKQ,iBAAiBD,IAC7CD,IACAN,EAAOrG,KAAKe,MAAM4F,GAClBC,EAAS5G,KAAKe,MAAM4F,EAAW,GAEjC,OAAON,IAhDX,qBAkDE,WACE,OAAOrG,KAAKe,MAAMf,KAAKe,MAAMd,OAAS,KAnD1C,uBAsDE,WACE,MAAO,CACLW,MAAOZ,KAAKY,MACZG,MAAOf,KAAKe,MAAMK,KAAI,SAACf,GAAD,OAAOA,EAAE0B,mBAzDrC,0BA4DE,SAAmBf,GACjB,IAAMD,EAAQC,EAAMD,MAAMK,KAAI,SAACN,GAAD,OAAUmF,IAAKhE,YAAYnB,MACzD,OAAO,IAAIkB,EAAOhB,EAAMJ,MAAOG,OA9DnC,M,mFCAakF,EAAb,WAGE,WAAqBjF,GAAmB,yBAAnBA,QAAkB,KAF9BkC,UAE8B,OAD9BO,WAC8B,EACrCzD,KAAKkD,KAAO4D,KAAKC,MAAM/F,EAAMgG,KAAO,KACpChH,KAAKyD,MAAQzC,EAAMgG,KAAO,IAL9B,0CAQE,WACEhH,KAAKgB,MAAMgC,QAAS,IATxB,8BAWE,SAAiB4D,GACf,OAAO5G,KAAKyD,MAAQ,IAAMmD,EAAOnD,QAZrC,gCAcE,SAAmB/C,GACjB,IAAMuG,EAAUvG,EAAOwG,UACvB,OAAQD,GAAWjH,KAAK6G,iBAAiBI,KAhB7C,uBAmBE,WACE,OAAOjH,KAAKgB,SApBhB,0BAsBE,SAAmBA,GACjB,OAAO,IAAIiF,EAAKjF,OAvBpB,M,+GCDO,SAASG,EAAMlB,GAEpB,IADA,IAAMkH,EAAM,GACH9F,EAAI,EAAGA,EAAIpB,EAAQoB,IAC1B8F,EAAIrF,KAAKT,GAEX,OAAO8F,EAqCF,SAAS5C,EAAa6C,GAC3B,IAKMC,EAzCD,SAAoBxD,GAGzB,IAAMsD,EAAM,GAEZ,OADAtD,EAAIzD,SAAQ,SAACkH,GAAD,OAAYH,EAAIrF,KAAJ,MAAAqF,EAAG,YAASG,OAC7BH,EAoCiBI,CALXpG,EAAM,GAAGC,KAAI,SAACC,GACzB,IAAM6B,EAAO7B,EAAI+F,EAEjB,OADcjG,EAAM,IAAIC,KAAI,SAACoG,GAAD,OAXzB,SAAsB5G,EAAesC,EAAcO,GACxD,MAAO,CACLxC,GAAIL,EACJoG,KAAa,IAAP9D,EAAaO,EACnBT,QAAQ,GAO2ByE,CAAiB,GAAJpG,EAASmG,EAAGtE,EAAMsE,UAKpE,OApCK,SAAoBE,GAMzB,IAJA,IAAIC,EAAeD,EAAMzH,OACrB2H,EAAc,EAGX,IAAMD,GAAc,CAEzBC,EAAcd,KAAKC,MAAMD,KAAKe,SAAWF,GACzCA,IAHyB,MAMmB,CAC1CD,EAAME,GACNF,EAAMC,IAFPD,EAAMC,GANkB,KAMHD,EAAME,GANH,MA6B3BE,CAAQT,GACDA,K","file":"static/js/main.2b8f89a6.chunk.js","sourcesContent":["import { Card } from \"./card\";\nimport { Column } from \"./column\";\nimport { BoardState, DeckState, Pointers } from \"./types\";\nimport { range } from \"./util\";\n\nexport class Board {\n  readonly originalDeck: DeckState;\n  readonly remainingDeck: DeckState;\n  readonly columns: Column[];\n  constructor(args: {\n    originalDeck: DeckState;\n    remainingDeck: DeckState;\n    columns: Column[];\n  }) {\n    this.originalDeck = args.originalDeck;\n    this.remainingDeck = args.remainingDeck;\n    this.columns = args.columns;\n  }\n\n  remainingDeals() {\n    return this.remainingDeck.length / this.columns.length;\n  }\n  deal() {\n    if (this.remainingDeals() < 1) {\n      throw new Error(\"deal is impossible\");\n    }\n    this.columns.forEach((c) => {\n      c.deal(this.remainingDeck.pop()!);\n      c.revealBottom();\n    });\n  }\n  private resolvePointers(pointers: Pointers): { column: Column, card: Card | undefined } {\n    const column = this.columns.filter(c => c.index === pointers.columnIndex)[0];\n    const card = column.cards.filter(c => c.state.id === pointers.cardId)[0];\n    return { column, card };\n  }\n  private possibleMovesFromObj(column: Column, card?: Card): Column[] {\n    if (!card) { return []; }\n    const otherCols = range(this.columns.length - 1).map(i => {\n      const colId = (column.index + i + 1) % this.columns.length;\n      return this.columns[colId];\n    });\n    const valid = otherCols.filter(col => card.canMoveBelowColumn(col));\n    return valid;\n  }\n  possibleMoves(pointers: Pointers) {\n    const { column, card } = this.resolvePointers(pointers);\n    return this.possibleMovesFromObj(column, card);\n  }\n  performMove(pointers: Pointers) {\n    const { column, card } = this.resolvePointers(pointers);\n    if (!card) { return; }\n    const canMove = column.canMove(card);\n    if (!canMove) { return; }\n    const possibleMoves = this.possibleMovesFromObj(column, card);\n    const dest = possibleMoves[0];\n    if (dest) {\n      const popped = column.pop(card);\n      column.revealBottom();\n      dest.push(popped);\n    }\n  }\n\n  serialize(): BoardState {\n    return {\n      originalDeck: this.originalDeck,\n      remainingDeck: this.remainingDeck,\n      columns: this.columns.map((c) => c.serialize()),\n    };\n  }\n  static deserialize(state: BoardState) {\n    const columns = state.columns.map((column) => Column.deserialize(column));\n    return new Board({\n      ...state,\n      columns,\n    });\n  }\n\n  static createNew(originalDeck: DeckState) {\n    const numColumns = 10;\n    const columns = range(numColumns).map(i => new Column(i));\n    const remainingDeck = originalDeck.concat();\n\n    // deal all but 5 deals\n    for (let i = 0; remainingDeck.length > 5 * numColumns; i++) {\n      const column = columns[i % columns.length];\n      column.deal(remainingDeck.pop()!);\n    }\n\n    // reveal bottom\n    columns.forEach((c) => c.revealBottom());\n\n    return new Board({\n      originalDeck,\n      remainingDeck,\n      columns,\n    });\n  }\n}\n","export * from \"./board\";\nexport * from \"./card\";\nexport * from \"./column\";\nexport * from \"./types\";\nexport * from \"./util\";\n","import React from 'react';\nimport { Board, Callback, Card, Column, Pointers, Trigger } from \"../logic\";\n\nimport styled from 'styled-components';\nconst CompCard = styled.div<{ color: string, background: string, canMove: boolean }>`\n  --suit: ${props => props.color};\n  padding: 0.5em;\n  width: 4em;\n  text-align: center;\n  color: var(--suit);\n  background: ${props => props.background};\n  border: 1px solid var(--suit);\n  border-radius: 0.5em;\n  cursor: ${props => props.canMove ? 'pointer' : 'not-allowed'};\n`;\n\nconst suitToSymbol = [\n  '♠️',\n  '♥️',\n  '♦️',\n  '♣️',\n];\nconst suitToColor = [\n  'black',\n  'red',\n  'darkviolet',\n  'green',\n];\nconst valueToString = [\n  'A',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '10',\n  'J',\n  'Q',\n  'K',\n];\n\nexport function ViewCard(props: {\n  column: Column,\n  card: Card | undefined,\n  canReceiveHover: boolean;\n  onHover: Callback<Pointers | undefined>,\n  trigger: Trigger<Board>,\n}) {\n  const {\n    column,\n    card,\n    canReceiveHover,\n    onHover,\n    trigger,\n  } = props;\n  if (!card) {\n    const background = canReceiveHover ? 'lightgreen' : 'white';\n    return (\n      <CompCard canMove={false} color='grey' background={background}>\n        (empty)\n      </CompCard>\n    );\n  }\n  if (card.state.faceUp) {\n    const pointer: Pointers = { columnIndex: column.index, cardId: card.state.id, };\n    const canMove = column.canMove(card);\n    const background = (\n      (!canMove && 'lightgrey') ||\n      (canReceiveHover && 'lightgreen') ||\n      'white'\n    );\n    return (\n      <CompCard\n        canMove={canMove}\n        color={suitToColor[card.suit]}\n        background={background}\n        onClick={trigger(b => b.performMove(pointer))}\n        onMouseEnter={() => onHover(pointer)}\n        onMouseLeave={() => onHover(undefined)}\n      >\n        {valueToString[card.value]} {suitToSymbol[card.suit]}\n      </CompCard>\n    );\n  }\n  const background = `repeating-linear-gradient(\n    45deg,\n    #606dbc,\n    #606dbc 10px,\n    #465298 10px,\n    #465298 20px\n  )`;\n  return (\n    <CompCard canMove={false} color='white' background={background}>\n      ???\n    </CompCard>\n  );\n}\n","import React from 'react';\nimport { ViewCard } from './ViewCard';\nimport { Board, Callback, Column, Pointers, Trigger } from \"../logic\";\n\nimport styled from 'styled-components';\nconst CompColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n\n  padding: 1em;\n`;\n\nexport function ViewColumn(props: {\n  column: Column;\n  canReceiveHover: boolean;\n  onHover: Callback<Pointers | undefined>;\n  trigger: Trigger<Board>;\n}) {\n  const {\n    column,\n    canReceiveHover,\n    onHover,\n    trigger,\n  } = props;\n  return (\n    <CompColumn>\n      {column.cards.length === 0 && (\n        <ViewCard\n          column={column}\n          card={undefined}\n          canReceiveHover={canReceiveHover}\n          onHover={() => { }}\n          trigger={trigger}\n        />\n      )}\n      {column.cards.map((card, ci, arr) => (\n        <ViewCard\n          key={ci}\n          column={column}\n          card={card}\n          canReceiveHover={canReceiveHover && ci === arr.length - 1}\n          onHover={onHover}\n          trigger={trigger}\n        />\n      ))}\n    </CompColumn>\n  )\n}\n","import React from 'react';\nimport { Board, Callback, CardState, Column, GenerateDeck, Pointers, Trigger } from \"../logic\";\nimport { ViewColumn } from './ViewColumn';\n\nimport styled from 'styled-components';\nconst CompBoard = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\nconst CompHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n\n  padding: 1em;\n`;\nconst CompColumnContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\n\nexport function ViewBoard(props: {\n  board: Board,\n  possibleMoves: Column[],\n  onHover: Callback<Pointers | undefined>,\n  trigger: Trigger<Board>,\n  reset: Callback<Board>,\n}) {\n  const {\n    board,\n    possibleMoves,\n    onHover,\n    trigger,\n    reset,\n  } = props;\n  const remainingDeals = board.remainingDeals();\n  const possibleMoveIds = possibleMoves.map(col => col.index);\n  return (\n    <CompBoard>\n      <CompHeader>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(1)))}>\n          1 suit\n        </button>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(2)))}>\n          2 suit\n        </button>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(3)))}>\n          3 suit\n        </button>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(4)))}>\n          4 suit\n        </button>\n      </CompHeader>\n      <CompHeader>\n        {remainingDeals ? (\n          <button onClick={trigger(b => b.deal())}>\n            Deal {remainingDeals}\n          </button>\n        ) : null}\n      </CompHeader>\n      <CompColumnContainer>\n        {board.columns.map((column, ci) => (\n          <ViewColumn key={ci} column={column} canReceiveHover={possibleMoveIds.includes(ci)} onHover={onHover} trigger={trigger} />\n        ))}\n      </CompColumnContainer>\n    </CompBoard>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { Board, Callback, GenerateDeck, Pointers } from '../logic';\nimport { ViewBoard } from './ViewBoard';\n\nexport function App() {\n  const [boardState, setBoardState] = useState(Board.createNew(GenerateDeck(4)).serialize());\n  const [hover, setHover] = useState(undefined as Pointers | undefined);\n\n  const triggerBoard = useCallback((cb: Callback<Board>) => {\n    const onTrigger = () => {\n      const newBoard = Board.deserialize(boardState);\n      cb(newBoard);\n      setBoardState(newBoard.serialize());\n    };\n    return onTrigger;\n  }, [boardState, setBoardState]);\n\n  const reset = useCallback((newBoard: Board) => {\n    setBoardState(newBoard.serialize());\n  }, [setBoardState]);\n\n  const board = Board.deserialize(boardState);\n  const possibleMoves = hover ? board.possibleMoves(hover) : [];\n  return (\n    <ViewBoard\n      board={board}\n      possibleMoves={possibleMoves}\n      onHover={setHover}\n      trigger={triggerBoard}\n      reset={reset} />\n  );\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './fe/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Card } from \"./card\";\nimport { CardState, ColumnState } from \"./types\";\n\nexport class Column {\n  constructor(readonly index: number, readonly cards: Card[] = []) { }\n\n  deal(state: CardState) {\n    this.cards.push(new Card(state));\n  }\n  revealBottom() {\n    this.cards[this.cards.length - 1]?.reveal();\n  }\n  private relIndexOf(card: Card): number {\n    return this.cards.findIndex(c => c.state.id === card.state.id);\n  }\n  canMove(card: Card) {\n    if (!card.state.faceUp) { return false; }\n    const index = this.relIndexOf(card);\n    if (index < 0) { return false; }\n    if (index === this.cards.length - 1) { return true; }\n    const head = this.getHead();\n    if (head) {\n      const headIndex = this.relIndexOf(head);\n      if (headIndex >= 0 && headIndex <= index) {\n        return true;\n      }\n    }\n    return false;\n  }\n  pop(topCard: Card): Card[] {\n    const index = this.relIndexOf(topCard);\n    if (index < 0) { throw new Error('illegal move'); }\n    const popped: Card[] = [];\n    while (this.cards.length > index) {\n      popped.push(this.cards.pop()!);\n    }\n    return popped.reverse();\n  }\n  push(newCards: Card[]): void {\n    this.cards.push(...newCards);\n  }\n\n  getHead(): Card | undefined {\n    let relIndex = this.cards.length - 1;\n    let head = this.cards[relIndex];\n    let parent = this.cards[relIndex - 1];\n    while (parent && head && head.canMoveBelowCard(parent)) {\n      relIndex--;\n      head = this.cards[relIndex];\n      parent = this.cards[relIndex - 1];\n    }\n    return head;\n  }\n  getLeaf(): Card | undefined {\n    return this.cards[this.cards.length - 1];\n  }\n\n  serialize(): ColumnState {\n    return {\n      index: this.index,\n      cards: this.cards.map((c) => c.serialize()),\n    };\n  }\n  static deserialize(state: ColumnState) {\n    const cards = state.cards.map((card) => Card.deserialize(card));\n    return new Column(state.index, cards);\n  }\n}\n","import { Column } from \"./column\";\nimport { CardState } from \"./types\";\n\nexport class Card {\n  readonly suit: number;\n  readonly value: number;\n  constructor(readonly state: CardState) {\n    this.suit = Math.floor(state.code / 100);\n    this.value = state.code % 100;\n  }\n\n  reveal() {\n    this.state.faceUp = true;\n  }\n  canMoveBelowCard(parent: Card) {\n    return this.value + 1 === parent.value;\n  }\n  canMoveBelowColumn(column: Column) {\n    const current = column.getLeaf();\n    return !current || this.canMoveBelowCard(current);\n  }\n\n  serialize(): CardState {\n    return this.state;\n  }\n  static deserialize(state: CardState) {\n    return new Card(state);\n  }\n}\n","import { CardState, DeckState } from \"./types\";\n\nexport function range(length: number): number[] {\n  const out = [] as number[];\n  for (let i = 0; i < length; i++) {\n    out.push(i);\n  }\n  return out;\n}\nexport function flatten<T>(arr: T[][]): T[] {\n  // dumb polyfill for jest\n  // https://github.com/kulshekhar/ts-jest/issues/828\n  const out = [] as T[];\n  arr.forEach((subArr) => out.push(...subArr));\n  return out;\n}\nexport function shuffle<T>(array: T[]) {\n  // https://stackoverflow.com/a/2450976\n  let currentIndex = array.length;\n  let randomIndex = 0;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n  return array;\n}\n\nexport function GenerateCard(index: number, suit: number, value: number): CardState {\n  return {\n    id: index,\n    code: suit * 100 + value,\n    faceUp: false,\n  };\n}\n\nexport function GenerateDeck(numSuits: number) {\n  const rows = range(8).map((i) => {\n    const suit = i % numSuits;\n    const cards = range(13).map((v) => GenerateCard(i * 13 + v, suit, v));\n    return cards;\n  });\n  const deck: DeckState = flatten(rows);\n  shuffle(deck);\n  return deck;\n}\n"],"sourceRoot":""}