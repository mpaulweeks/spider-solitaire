{"version":3,"sources":["fe/logo.svg","logic/util.ts","fe/App.tsx","reportWebVitals.ts","index.tsx"],"names":["range","length","out","i","push","GenerateDeck","numSuits","deck","arr","forEach","subArr","flatten","map","suit","v","value","GenerateCard","array","currentIndex","randomIndex","Math","floor","random","shuffle","App","console","log","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAAe,G,KAAA,IAA0B,kC,eCElC,SAASA,EAAMC,GAEpB,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIF,EAAQE,IAC1BD,EAAIE,KAAKD,GAEX,OAAOD,EA+BF,SAASG,EAAaC,GAC3B,IAKMC,EAnCD,SAAoBC,GAGzB,IAAMN,EAAM,GAEZ,OADAM,EAAIC,SAAQ,SAAAC,GAAM,OAAIR,EAAIE,KAAJ,MAAAF,EAAG,YAASQ,OAC3BR,EA8BgBS,CALVX,EAAM,GAAGY,KAAI,SAAAT,GACxB,IAAMU,EAAOV,EAAIG,EAEjB,OADcN,EAAM,IAAIY,KAAI,SAAAE,GAAC,OAP1B,SAAsBD,EAAcE,GACzC,OAAe,IAAPF,EAAcE,EAMaC,CAAaH,EAAMC,UAKtD,OA9BK,SAAoBG,GAMzB,IAJA,IAAIC,EAAeD,EAAMhB,OACrBkB,EAAc,EAGX,IAAMD,GAAc,CAEzBC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCA,IAHyB,MAMmB,CAC1CD,EAAME,GAAcF,EAAMC,IAD3BD,EAAMC,GANkB,KAMHD,EAAME,GANH,MAuB3BI,CAAQhB,GACDA,E,WClBMiB,MAvBf,WAGE,OAFAC,QAAQC,IAAIrB,EAAa,IACzBoB,QAAQC,IAAIrB,EAAa,IAEvB,qBAAKsB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,+CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,+BCDOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6ed111c8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { DeckData } from \"./types\";\n\nexport function range(length: number): number[] {\n  const out = [] as number[];\n  for (let i = 0; i < length; i++) {\n    out.push(i);\n  }\n  return out;\n}\nexport function flatten<T>(arr: T[][]): T[] {\n  // dumb polyfill for jest\n  // https://github.com/kulshekhar/ts-jest/issues/828\n  const out = [] as T[];\n  arr.forEach(subArr => out.push(...subArr));\n  return out;\n}\nexport function shuffle<T>(array: T[]) {\n  // https://stackoverflow.com/a/2450976\n  let currentIndex = array.length;\n  let randomIndex = 0;;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n  return array;\n}\n\nexport function GenerateCard(suit: number, value: number) {\n  return (suit * 100) + value;\n}\n\nexport function GenerateDeck(numSuits: number) {\n  const rows = range(8).map(i => {\n    const suit = i % numSuits;\n    const cards = range(13).map(v => GenerateCard(suit, v));\n    return cards;\n  });\n  const deck: DeckData = flatten(rows);\n  shuffle(deck);\n  return deck;\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { GenerateDeck } from '../logic/util';\n\nfunction App() {\n  console.log(GenerateDeck(1));\n  console.log(GenerateDeck(4));\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './fe/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}