{"version":3,"sources":["logic/board.ts","logic/index.ts","fe/ViewCard.tsx","fe/ViewColumn.tsx","fe/ViewBoard.tsx","fe/App.tsx","reportWebVitals.ts","index.tsx","logic/column.ts","logic/card.ts","logic/util.ts"],"names":["Board","args","originalDeck","remainingDeck","columns","this","length","remainingDeals","Error","forEach","c","deal","pop","revealBottom","column","card","range","map","i","colId","index","filter","col","canMoveBelowColumn","pointers","columnIndex","cards","state","cardIndex","canMove","dest","possibleMoves","popped","push","serialize","Column","deserialize","concat","CompCard","styled","div","props","color","suitToSymbol","suitToColor","valueToString","ViewCard","trigger","faceUp","suit","onClick","b","move","value","CompColumn","ViewColumn","ci","CompBoard","CompHeader","CompColumnContainer","ViewBoard","board","reset","createNew","GenerateDeck","App","useState","boardState","setBoardState","triggerBoard","useCallback","cb","newBoard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Card","reveal","findIndex","indexOf","topCard","reverse","newCards","Math","floor","code","parent","current","getCurrent","canMoveBelowCard","out","numSuits","deck","arr","subArr","flatten","v","GenerateCard","array","currentIndex","randomIndex","random","shuffle"],"mappings":"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","file":"static/js/main.cdd8c1a6.chunk.js","sourcesContent":["import { Card } from \"./card\";\nimport { Column } from \"./column\";\nimport { BoardState, DeckState } from \"./types\";\nimport { range } from \"./util\";\n\nexport class Board {\n  readonly originalDeck: DeckState;\n  readonly remainingDeck: DeckState;\n  readonly columns: Column[];\n  constructor(args: {\n    originalDeck: DeckState;\n    remainingDeck: DeckState;\n    columns: Column[];\n  }) {\n    this.originalDeck = args.originalDeck;\n    this.remainingDeck = args.remainingDeck;\n    this.columns = args.columns;\n  }\n\n  remainingDeals() {\n    return this.remainingDeck.length / this.columns.length;\n  }\n  deal() {\n    if (this.remainingDeals() < 1) {\n      throw new Error(\"deal is impossible\");\n    }\n    this.columns.forEach((c) => {\n      c.deal(this.remainingDeck.pop()!);\n      c.revealBottom();\n    });\n  }\n  possibleMoves(column: Column, card: Card): Column[] {\n    const otherCols = range(this.columns.length - 1).map(i => {\n      const colId = (column.index + i + 1) % this.columns.length;\n      return this.columns[colId];\n    });\n    const valid = otherCols.filter(col => card.canMoveBelowColumn(col));\n    return valid;\n  }\n  move(pointers: { columnIndex: number, cardIndex: number }) {\n    const column = this.columns.filter(c => c.index === pointers.columnIndex)[0];\n    const card = column.cards.filter(c => c.state.index === pointers.cardIndex)[0];\n    const canMove = column.canMove(card);\n    if (!canMove) { return; }\n    const possibleMoves = this.possibleMoves(column, card);\n    const dest = possibleMoves[0];\n    if (dest) {\n      const popped = column.pop(card);\n      column.revealBottom();\n      dest.push(popped);\n    }\n  }\n\n  serialize(): BoardState {\n    return {\n      originalDeck: this.originalDeck,\n      remainingDeck: this.remainingDeck,\n      columns: this.columns.map((c) => c.serialize()),\n    };\n  }\n  static deserialize(state: BoardState) {\n    const columns = state.columns.map((column) => Column.deserialize(column));\n    return new Board({\n      ...state,\n      columns,\n    });\n  }\n\n  static createNew(originalDeck: DeckState) {\n    const numColumns = 10;\n    const columns = range(numColumns).map(i => new Column(i));\n    const remainingDeck = originalDeck.concat();\n\n    // deal all but 5 deals\n    for (let i = 0; remainingDeck.length > 5 * numColumns; i++) {\n      const column = columns[i % columns.length];\n      column.deal(remainingDeck.pop()!);\n    }\n\n    // reveal bottom\n    columns.forEach((c) => c.revealBottom());\n\n    return new Board({\n      originalDeck,\n      remainingDeck,\n      columns,\n    });\n  }\n}\n","export * from \"./board\";\nexport * from \"./card\";\nexport * from \"./column\";\nexport * from \"./types\";\nexport * from \"./util\";\n","import React from 'react';\nimport { Board, Card, Column, Trigger } from \"../logic\";\n\nimport styled from 'styled-components';\nconst CompCard = styled.div<{ color: string }>`\n  --suit: ${props => props.color};\n  padding: 0.5em;\n  width: 4em;\n  text-align: center;\n  color: var(--suit);\n  border: 1px solid var(--suit);\n  border-radius: 0.5em;\n`;\n\nconst suitToSymbol = [\n  '♠️',\n  '♥️',\n  '♦️',\n  '♣️',\n];\nconst suitToColor = [\n  'black',\n  'red',\n  'darkviolet',\n  'green',\n];\nconst valueToString = [\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '10',\n  'J',\n  'Q',\n  'K',\n];\n\nexport function ViewCard(props: {\n  column: Column,\n  card: Card,\n  trigger: Trigger<Board>,\n}) {\n  const {\n    column,\n    card,\n    trigger,\n  } = props;\n  if (card.state.faceUp) {\n    return (\n      <CompCard color={suitToColor[card.suit]} onClick={trigger(b => b.move({ columnIndex: column.index, cardIndex: card.state.index, }))}>\n        {valueToString[card.value]} {suitToSymbol[card.suit]}\n      </CompCard>\n    )\n  }\n  return (\n    <CompCard color='grey'>\n      ???\n    </CompCard>\n  );\n}\n","import React from 'react';\nimport { ViewCard } from './ViewCard';\nimport { Board, Column, Trigger } from \"../logic\";\n\nimport styled from 'styled-components';\nconst CompColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n\n  padding: 1em;\n`;\n\nexport function ViewColumn(props: {\n  column: Column,\n  trigger: Trigger<Board>,\n}) {\n  const {\n    column,\n    trigger,\n  } = props;\n  return (\n    <CompColumn>\n      {props.column.cards.map((card, ci) => (\n        <ViewCard key={ci} column={column} card={card} trigger={trigger} />\n      ))}\n    </CompColumn>\n  )\n}\n","import React from 'react';\nimport { Board, Callback, GenerateDeck, Trigger } from \"../logic\";\nimport { ViewColumn } from './ViewColumn';\n\nimport styled from 'styled-components';\nconst CompBoard = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\nconst CompHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n\n  padding: 1em;\n`;\nconst CompColumnContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\n\nexport function ViewBoard(props: {\n  board: Board,\n  trigger: Trigger<Board>,\n  reset: Callback<Board>,\n}) {\n  const {\n    board,\n    trigger,\n    reset,\n  } = props;\n  const remainingDeals = board.remainingDeals();\n  return (\n    <CompBoard>\n      <CompHeader>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(1)))}>\n          1 suit\n        </button>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(2)))}>\n          2 suit\n        </button>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(3)))}>\n          3 suit\n        </button>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(4)))}>\n          4 suit\n        </button>\n      </CompHeader>\n      <CompHeader>\n        {remainingDeals ? (\n          <button onClick={trigger(b => b.deal())}>\n            Deal {remainingDeals}\n          </button>\n        ) : null}\n      </CompHeader>\n      <CompColumnContainer>\n        {board.columns.map((column, ci) => (\n          <ViewColumn key={ci} column={column} trigger={trigger} />\n        ))}\n      </CompColumnContainer>\n    </CompBoard>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { Board, Callback, GenerateDeck } from '../logic';\nimport { ViewBoard } from './ViewBoard';\n\nexport function App() {\n  const [boardState, setBoardState] = useState(Board.createNew(GenerateDeck(4)).serialize());\n\n  const triggerBoard = useCallback((cb: Callback<Board>) => {\n    const onTrigger = () => {\n      const newBoard = Board.deserialize(boardState);\n      cb(newBoard);\n      setBoardState(newBoard.serialize());\n    };\n    return onTrigger;\n  }, [boardState, setBoardState]);\n\n  const reset = useCallback((newBoard: Board) => {\n    setBoardState(newBoard.serialize());\n  }, [setBoardState]);\n\n  const board = Board.deserialize(boardState);\n  return <ViewBoard board={board} trigger={triggerBoard} reset={reset} />;\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './fe/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Card } from \"./card\";\nimport { CardState, ColumnState } from \"./types\";\n\nexport class Column {\n  constructor(readonly index: number, readonly cards: Card[] = []) { }\n\n  deal(state: CardState) {\n    this.cards.push(new Card(state));\n  }\n  revealBottom() {\n    this.cards[this.cards.length - 1]?.reveal();\n  }\n  private indexOf(card: Card): number {\n    return this.cards.findIndex(c => c.state.index === card.state.index);\n  }\n  canMove(card: Card) {\n    if (!card.state.faceUp) { return false; }\n    const index = this.indexOf(card);\n    if (index < 0) { return false; }\n    if (index === this.cards.length - 1) { return true; }\n    // todo detect chain\n    return false;\n  }\n  pop(topCard: Card): Card[] {\n    const index = this.indexOf(topCard);\n    if (index < 0) { throw new Error('illegal move'); }\n    const popped: Card[] = [];\n    while (this.cards.length > index) {\n      popped.push(this.cards.pop()!);\n    }\n    return popped.reverse();\n  }\n  push(newCards: Card[]): void {\n    this.cards.push(...newCards);\n  }\n\n  getCurrent(): Card | undefined {\n    return this.cards[this.cards.length - 1];\n  }\n\n  serialize(): ColumnState {\n    return {\n      index: this.index,\n      cards: this.cards.map((c) => c.serialize()),\n    };\n  }\n  static deserialize(state: ColumnState) {\n    const cards = state.cards.map((card) => Card.deserialize(card));\n    return new Column(state.index, cards);\n  }\n}\n","import { Column } from \"./column\";\nimport { CardState } from \"./types\";\n\nexport class Card {\n  readonly suit: number;\n  readonly value: number;\n  constructor(readonly state: CardState) {\n    this.suit = Math.floor(state.code / 100);\n    this.value = state.code % 100;\n  }\n\n  reveal() {\n    this.state.faceUp = true;\n  }\n  canMoveBelowCard(parent: Card) {\n    return this.value + 1 === parent.value;\n  }\n  canMoveBelowColumn(column: Column) {\n    const current = column.getCurrent();\n    return !current || this.canMoveBelowCard(current);\n  }\n\n  serialize(): CardState {\n    return this.state;\n  }\n  static deserialize(state: CardState) {\n    return new Card(state);\n  }\n}\n","import { CardState, DeckState } from \"./types\";\n\nexport function range(length: number): number[] {\n  const out = [] as number[];\n  for (let i = 0; i < length; i++) {\n    out.push(i);\n  }\n  return out;\n}\nexport function flatten<T>(arr: T[][]): T[] {\n  // dumb polyfill for jest\n  // https://github.com/kulshekhar/ts-jest/issues/828\n  const out = [] as T[];\n  arr.forEach((subArr) => out.push(...subArr));\n  return out;\n}\nexport function shuffle<T>(array: T[]) {\n  // https://stackoverflow.com/a/2450976\n  let currentIndex = array.length;\n  let randomIndex = 0;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n  return array;\n}\n\nexport function GenerateCard(index: number, suit: number, value: number): CardState {\n  return {\n    index,\n    code: suit * 100 + value,\n    faceUp: false,\n  };\n}\n\nexport function GenerateDeck(numSuits: number) {\n  const rows = range(8).map((i) => {\n    const suit = i % numSuits;\n    const cards = range(13).map((v) => GenerateCard(i * 13 + v, suit, v));\n    return cards;\n  });\n  const deck: DeckState = flatten(rows);\n  shuffle(deck);\n  return deck;\n}\n"],"sourceRoot":""}