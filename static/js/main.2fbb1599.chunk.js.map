{"version":3,"sources":["logic/index.ts","logic/board.ts","fe/ViewCard.tsx","fe/ViewColumn.tsx","fe/ViewBoard.tsx","fe/App.tsx","reportWebVitals.ts","index.tsx","logic/card.ts","logic/column.ts","logic/util.ts"],"names":["Board","originalDeck","columns","remainingDeck","this","range","map","_","Column","concat","i","length","dealFaceDown","pop","forEach","c","revealBottom","Error","dealFaceUp","serialize","CompCard","styled","div","props","color","suitToSymbol","ViewCard","card","state","faceUp","suit","value","CompColumn","ViewColumn","column","cards","CompBoard","CompHeader","CompColumnContainer","ViewBoard","onClick","trigger","board","deal","App","useState","GenerateDeck","setBoard","triggerBoard","useCallback","cb","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Card","Math","floor","code","parent","current","getCurrent","canMoveBelowCard","push","reveal","deserialize","out","numSuits","deck","arr","subArr","flatten","v","GenerateCard","array","currentIndex","randomIndex","random","shuffle"],"mappings":"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","file":"static/js/main.2fbb1599.chunk.js","sourcesContent":["export * from \"./board\";\nexport * from \"./card\";\nexport * from \"./column\";\nexport * from \"./types\";\nexport * from \"./util\";\n","import { Column } from \"./column\";\nimport { BoardState, DeckData } from \"./types\";\nimport { range } from \"./util\";\n\nexport class Board {\n  readonly columns: Column[];\n  readonly remainingDeck: DeckData;\n  constructor(readonly originalDeck: DeckData) {\n    const numColumns = 10;\n    this.columns = range(numColumns).map((_) => new Column());\n    this.remainingDeck = originalDeck.concat();\n\n    // deal all but 5 deals\n    for (let i = 0; this.remainingDeck.length > 5 * numColumns; i++) {\n      const column = this.columns[i % this.columns.length];\n      column.dealFaceDown(this.remainingDeck.pop()!);\n    }\n\n    // reveal bottom\n    this.columns.forEach((c) => c.revealBottom());\n  }\n\n  deal() {\n    if (this.remainingDeck.length < this.columns.length) {\n      throw new Error(\"deal is impossible\");\n    }\n    this.columns.forEach((c) => c.dealFaceUp(this.remainingDeck.pop()!));\n  }\n\n  serialize(): BoardState {\n    return {\n      originalDeck: this.originalDeck,\n      remainingDeck: this.remainingDeck,\n      columns: this.columns.map(c => c.serialize()),\n    };\n  }\n}\n","import React from 'react';\nimport { Card } from \"../logic\";\n\nimport styled from 'styled-components';\nconst CompCard = styled.div<{ color: string }>`\n  --suit: ${props => props.color};\n  padding: 0.5em;\n  width: 4em;\n  text-align: center;\n  color: var(--suit);\n  border: 1px solid var(--suit);\n  border-radius: 0.5em;\n`;\n\nconst suitToSymbol = [\n  '♥️',\n  '♠️',\n  '♦️',\n  '♣️',\n];\n\nexport function ViewCard(props: { card: Card }) {\n  const { card } = props;\n  if (card.state.faceUp) {\n    const color = card.suit === 2 ? 'red' : 'black';\n    return (\n      <CompCard color={color}>\n        {card.value} {suitToSymbol[card.suit]}\n      </CompCard>\n    )\n  }\n  return (\n    <CompCard color='grey'>\n      ???\n    </CompCard>\n  );\n}\n","import React from 'react';\nimport { ViewCard } from './ViewCard';\nimport { Column } from \"../logic\";\n\nimport styled from 'styled-components';\nconst CompColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n\n  padding: 1em;\n`;\n\nexport function ViewColumn(props: { column: Column }) {\n  return (\n    <CompColumn>\n      {props.column.cards.map(card => (\n        <ViewCard card={card} />\n      ))}\n    </CompColumn>\n  )\n}\n","import React from 'react';\nimport { Board, Trigger } from \"../logic\";\nimport { ViewColumn } from './ViewColumn';\n\nimport styled from 'styled-components';\nconst CompBoard = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\nconst CompHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\nconst CompColumnContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\n\nexport function ViewBoard(props: { board: Board, trigger: Trigger<Board> }) {\n  return (\n    <CompBoard>\n      <CompHeader>\n        <button onClick={props.trigger(board => board.deal())}>Deal</button>\n      </CompHeader>\n      <CompColumnContainer>\n        {props.board.columns.map(column => (\n          <ViewColumn column={column} />\n        ))}\n      </CompColumnContainer>\n    </CompBoard>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { Board, Callback, GenerateDeck } from '../logic';\nimport { ViewBoard } from './ViewBoard';\n\nfunction App() {\n  const [board, setBoard] = useState(new Board(GenerateDeck(4)));\n\n  const triggerBoard = useCallback((cb: Callback<Board>) => {\n    const onTrigger = () => {\n      cb(board);\n      setBoard(board);\n    };\n    return onTrigger;\n  }, [board, setBoard]);\n\n  return <ViewBoard board={board} trigger={triggerBoard} />;\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './fe/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Column } from \"./column\";\nimport { CardState } from \"./types\";\n\nexport class Card {\n  readonly suit: number;\n  readonly value: number;\n  constructor(readonly state: CardState) {\n    this.suit = Math.floor(state.code / 100);\n    this.value = state.code % 100;\n  }\n\n  reveal() {\n    this.state.faceUp = true;\n  }\n  canMoveBelowCard(parent: Card) {\n    return this.value + 1 === parent.value;\n  }\n  canMoveBelowColumn(column: Column) {\n    const current = column.getCurrent();\n    return !current || this.canMoveBelowCard(current);\n  }\n\n  serialize(): CardState {\n    return this.state;\n  }\n  static deserialize(state: CardState) {\n    return new Card(state);\n  }\n}\n","import { Card } from \"./card\";\nimport { CardCode, ColumnState } from \"./types\";\n\nexport class Column {\n  constructor(readonly cards: Card[] = []) { }\n\n  dealFaceDown(code: CardCode) {\n    this.cards.push(new Card({ code, faceUp: false }));\n  }\n  dealFaceUp(code: CardCode) {\n    this.cards.push(new Card({ code, faceUp: true }));\n  }\n  revealBottom() {\n    this.cards[this.cards.length - 1]?.reveal();\n  }\n\n  getCurrent(): Card | undefined {\n    return this.cards[this.cards.length - 1];\n  }\n\n  serialize(): ColumnState {\n    return {\n      cards: this.cards.map((c) => c.serialize()),\n    };\n  }\n  static deserialize(state: ColumnState) {\n    const cards = state.cards.map(card => Card.deserialize(card));\n    return new Column(cards);\n  }\n}\n","import { DeckData } from \"./types\";\n\nexport function range(length: number): number[] {\n  const out = [] as number[];\n  for (let i = 0; i < length; i++) {\n    out.push(i);\n  }\n  return out;\n}\nexport function flatten<T>(arr: T[][]): T[] {\n  // dumb polyfill for jest\n  // https://github.com/kulshekhar/ts-jest/issues/828\n  const out = [] as T[];\n  arr.forEach((subArr) => out.push(...subArr));\n  return out;\n}\nexport function shuffle<T>(array: T[]) {\n  // https://stackoverflow.com/a/2450976\n  let currentIndex = array.length;\n  let randomIndex = 0;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n  return array;\n}\n\nexport function GenerateCard(suit: number, value: number) {\n  return suit * 100 + value;\n}\n\nexport function GenerateDeck(numSuits: number) {\n  const rows = range(8).map((i) => {\n    const suit = i % numSuits;\n    const cards = range(13).map((v) => GenerateCard(suit, v));\n    return cards;\n  });\n  const deck: DeckData = flatten(rows);\n  shuffle(deck);\n  return deck;\n}\n"],"sourceRoot":""}