{"version":3,"sources":["logic/util.ts","logic/board.ts","logic/index.ts","fe/ViewCard.tsx","fe/ViewColumn.tsx","fe/ViewBoard.tsx","fe/App.tsx","reportWebVitals.ts","index.tsx","logic/card.ts","logic/column.ts"],"names":["range","length","out","i","push","GenerateDeck","numSuits","deck","arr","forEach","subArr","flatten","map","suit","v","value","GenerateCard","array","currentIndex","randomIndex","Math","floor","random","shuffle","Board","args","originalDeck","remainingDeck","columns","this","remainingDeals","Error","c","dealFaceUp","pop","serialize","state","column","Column","deserialize","_","concat","dealFaceDown","revealBottom","CompCard","styled","div","props","color","suitToSymbol","suitToColor","valueToString","ViewCard","card","faceUp","CompColumn","ViewColumn","cards","ci","CompBoard","CompHeader","CompColumnContainer","ViewBoard","board","trigger","reset","onClick","createNew","b","deal","App","useState","boardState","setBoardState","triggerBoard","useCallback","cb","newBoard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Card","code","parent","current","getCurrent","canMoveBelowCard","reveal"],"mappings":"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","file":"static/js/main.3e71dea6.chunk.js","sourcesContent":["import { DeckData } from \"./types\";\n\nexport function range(length: number): number[] {\n  const out = [] as number[];\n  for (let i = 0; i < length; i++) {\n    out.push(i);\n  }\n  return out;\n}\nexport function flatten<T>(arr: T[][]): T[] {\n  // dumb polyfill for jest\n  // https://github.com/kulshekhar/ts-jest/issues/828\n  const out = [] as T[];\n  arr.forEach((subArr) => out.push(...subArr));\n  return out;\n}\nexport function shuffle<T>(array: T[]) {\n  // https://stackoverflow.com/a/2450976\n  let currentIndex = array.length;\n  let randomIndex = 0;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n  return array;\n}\n\nexport function GenerateCard(suit: number, value: number) {\n  return suit * 100 + value;\n}\n\nexport function GenerateDeck(numSuits: number) {\n  const rows = range(8).map((i) => {\n    const suit = i % numSuits;\n    const cards = range(13).map((v) => GenerateCard(suit, v));\n    return cards;\n  });\n  const deck: DeckData = flatten(rows);\n  shuffle(deck);\n  return deck;\n}\n","import { Column } from \"./column\";\nimport { BoardState, DeckData } from \"./types\";\nimport { range } from \"./util\";\n\nexport class Board {\n  readonly originalDeck: DeckData;\n  readonly remainingDeck: DeckData;\n  readonly columns: Column[];\n  constructor(args: {\n    originalDeck: DeckData;\n    remainingDeck: DeckData;\n    columns: Column[];\n  }) {\n    this.originalDeck = args.originalDeck;\n    this.remainingDeck = args.remainingDeck;\n    this.columns = args.columns;\n  }\n\n  remainingDeals() {\n    return this.remainingDeck.length / this.columns.length;\n  }\n  deal() {\n    if (this.remainingDeals() < 1) {\n      throw new Error(\"deal is impossible\");\n    }\n    this.columns.forEach((c) => c.dealFaceUp(this.remainingDeck.pop()!));\n  }\n\n  serialize(): BoardState {\n    return {\n      originalDeck: this.originalDeck,\n      remainingDeck: this.remainingDeck,\n      columns: this.columns.map((c) => c.serialize()),\n    };\n  }\n  static deserialize(state: BoardState) {\n    const columns = state.columns.map((column) => Column.deserialize(column));\n    return new Board({\n      ...state,\n      columns,\n    });\n  }\n\n  static createNew(originalDeck: DeckData) {\n    const numColumns = 10;\n    const columns = range(numColumns).map((_) => new Column());\n    const remainingDeck = originalDeck.concat();\n\n    // deal all but 5 deals\n    for (let i = 0; remainingDeck.length > 5 * numColumns; i++) {\n      const column = columns[i % columns.length];\n      column.dealFaceDown(remainingDeck.pop()!);\n    }\n\n    // reveal bottom\n    columns.forEach((c) => c.revealBottom());\n\n    return new Board({\n      originalDeck,\n      remainingDeck,\n      columns,\n    });\n  }\n}\n","export * from \"./board\";\nexport * from \"./card\";\nexport * from \"./column\";\nexport * from \"./types\";\nexport * from \"./util\";\n","import React from 'react';\nimport { Card } from \"../logic\";\n\nimport styled from 'styled-components';\nconst CompCard = styled.div<{ color: string }>`\n  --suit: ${props => props.color};\n  padding: 0.5em;\n  width: 4em;\n  text-align: center;\n  color: var(--suit);\n  border: 1px solid var(--suit);\n  border-radius: 0.5em;\n`;\n\nconst suitToSymbol = [\n  '♠️',\n  '♥️',\n  '♦️',\n  '♣️',\n];\nconst suitToColor = [\n  'black',\n  'red',\n  'darkviolet',\n  'green',\n];\nconst valueToString = [\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '10',\n  'J',\n  'Q',\n  'K',\n];\n\nexport function ViewCard(props: { card: Card }) {\n  const { card } = props;\n  if (card.state.faceUp) {\n    return (\n      <CompCard color={suitToColor[card.suit]}>\n        {valueToString[card.value]} {suitToSymbol[card.suit]}\n      </CompCard>\n    )\n  }\n  return (\n    <CompCard color='grey'>\n      ???\n    </CompCard>\n  );\n}\n","import React from 'react';\nimport { ViewCard } from './ViewCard';\nimport { Column } from \"../logic\";\n\nimport styled from 'styled-components';\nconst CompColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n\n  padding: 1em;\n`;\n\nexport function ViewColumn(props: { column: Column }) {\n  return (\n    <CompColumn>\n      {props.column.cards.map((card, ci) => (\n        <ViewCard key={ci} card={card} />\n      ))}\n    </CompColumn>\n  )\n}\n","import React from 'react';\nimport { Board, Callback, GenerateDeck, Trigger } from \"../logic\";\nimport { ViewColumn } from './ViewColumn';\n\nimport styled from 'styled-components';\nconst CompBoard = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\nconst CompHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n\n  padding: 1em;\n`;\nconst CompColumnContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`;\n\nexport function ViewBoard(props: { board: Board, trigger: Trigger<Board>, reset: Callback<Board>, }) {\n  const { board, trigger, reset } = props;\n  const remainingDeals = board.remainingDeals();\n  return (\n    <CompBoard>\n      <CompHeader>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(1)))}>\n          1 suit\n        </button>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(2)))}>\n          2 suit\n        </button>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(3)))}>\n          3 suit\n        </button>\n        <button onClick={() => reset(Board.createNew(GenerateDeck(4)))}>\n          4 suit\n        </button>\n      </CompHeader>\n      <CompHeader>\n        {remainingDeals ? (\n          <button onClick={trigger(b => b.deal())}>\n            Deal {remainingDeals}\n          </button>\n        ) : null}\n      </CompHeader>\n      <CompColumnContainer>\n        {board.columns.map((column, ci) => (\n          <ViewColumn key={ci} column={column} />\n        ))}\n      </CompColumnContainer>\n    </CompBoard>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { Board, Callback, GenerateDeck } from '../logic';\nimport { ViewBoard } from './ViewBoard';\n\nexport function App() {\n  const [boardState, setBoardState] = useState(Board.createNew(GenerateDeck(4)).serialize());\n\n  const triggerBoard = useCallback((cb: Callback<Board>) => {\n    const onTrigger = () => {\n      const newBoard = Board.deserialize(boardState);\n      cb(newBoard);\n      setBoardState(newBoard.serialize());\n    };\n    return onTrigger;\n  }, [boardState, setBoardState]);\n\n  const reset = useCallback((board: Board) => {\n    setBoardState(board.serialize());\n  }, [setBoardState]);\n\n  const board = Board.deserialize(boardState);\n  return <ViewBoard board={board} trigger={triggerBoard} reset={reset} />;\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './fe/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Column } from \"./column\";\nimport { CardState } from \"./types\";\n\nexport class Card {\n  readonly suit: number;\n  readonly value: number;\n  constructor(readonly state: CardState) {\n    this.suit = Math.floor(state.code / 100);\n    this.value = state.code % 100;\n  }\n\n  reveal() {\n    this.state.faceUp = true;\n  }\n  canMoveBelowCard(parent: Card) {\n    return this.value + 1 === parent.value;\n  }\n  canMoveBelowColumn(column: Column) {\n    const current = column.getCurrent();\n    return !current || this.canMoveBelowCard(current);\n  }\n\n  serialize(): CardState {\n    return this.state;\n  }\n  static deserialize(state: CardState) {\n    return new Card(state);\n  }\n}\n","import { Card } from \"./card\";\nimport { CardCode, ColumnState } from \"./types\";\n\nexport class Column {\n  constructor(readonly cards: Card[] = []) {}\n\n  dealFaceDown(code: CardCode) {\n    this.cards.push(new Card({ code, faceUp: false }));\n  }\n  dealFaceUp(code: CardCode) {\n    this.cards.push(new Card({ code, faceUp: true }));\n  }\n  revealBottom() {\n    this.cards[this.cards.length - 1]?.reveal();\n  }\n\n  getCurrent(): Card | undefined {\n    return this.cards[this.cards.length - 1];\n  }\n\n  serialize(): ColumnState {\n    return {\n      cards: this.cards.map((c) => c.serialize()),\n    };\n  }\n  static deserialize(state: ColumnState) {\n    const cards = state.cards.map((card) => Card.deserialize(card));\n    return new Column(cards);\n  }\n}\n"],"sourceRoot":""}